@model Nettit.Models.nChatroomViewModel
@{
    ViewData["Title"] = @Model.Chatroom.Title;
}

<main class="container">
    <header style="text-align: center; margin-bottom: 2rem;">
        <h1 style="margin-bottom: 0.5rem;">@Model.Chatroom.Title</h1>
        <p><a href="/n/@Model.Chatroom.Code"><strong>Invite Link</strong></a></p>
    </header>

    <section id="messageContainer">
        @if (Model.Messages != null && Model.Messages.Any())
        {
            <div style="display: flex; flex-direction: column; gap: 1rem; margin-bottom: 2rem;">
                
                @foreach (var message in Model.Messages)
                {
                    var isAuthor = message.User?.Id == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                    var isAdmin = User.IsInRole("Admin");

                    <article style="position: relative; padding: 1rem; border: 1px solid #ccc; border-radius: 8px; margin-bottom: 1rem;">
                        <small>
                            <header>
                                <strong>@message.User?.UserName</strong>
                                <p class="message-date" data-utc="@message.CreatedAt.ToString("o")"></p>
                            </header>
                        </small>
                        <p>@message.Content</p>

                        @if (isAuthor || isAdmin)
                        {
                            <form method="post" asp-action="Delete" asp-controller="Messages"
                                  onsubmit="return confirm('Are you sure you want to delete this message?');"
                                  style="position: absolute; top: 0.5rem; right: 0.5rem;">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@message.Id" />
                                <button type="submit" title="Delete message"
                                        style="background: none; border: none; color: red; font-weight: bold; font-size: 1.2rem; cursor: pointer; user-select: none; outline: none; box-shadow: none;">
                                    ×
                                </button>
                            </form>
                        }
                    </article>
                }
            </div>
        }
        else
        {
            <p>No messages yet. Be the first to say something!</p>
        }
    </section>

    <section style="position: fixed; bottom: 0; left: 0; right: 0; padding: 1rem; box-shadow: 0 -2px 10px rgba(0,0,0,0.1);">
        <div class="container">
            <form method="post" asp-controller="Messages" asp-action="Create">
                @Html.AntiForgeryToken()
                <input type="hidden" name="ChatroomId" value="@Model.Chatroom.Id" />
                <textarea id="Content" name="Content" rows="3" placeholder="A nice message..." required></textarea>
                <button type="submit" class="contrast">Send</button>
            </form>
        </div>
    </section>

    <!-- Spacer to prevent content from being hidden behind the fixed form -->
    <div style="height: 180px;"></div>
</main>

<script>
    // Format dates to local time
    document.querySelectorAll(".message-date").forEach(el => {
        const utc = el.dataset.utc;
        if (utc) {
            const localTime = new Date(utc).toLocaleString(undefined, { dateStyle: "medium", timeStyle: "short" });
            el.textContent = localTime;
        }
    });

    const input = document.getElementById('Content');

    input.addEventListener('input', function () {
        // Replace the input value with something else
        this.value = this.value.replace(":smile:", "😃")
        this.value = this.value.replace(":wink:", "😉")
        this.value = this.value.replace(":lol:", "😂")
    });

    // Scroll to bottom on page load
    document.addEventListener("DOMContentLoaded", function() {
        window.scrollTo(0, document.body.scrollHeight);
    });

    // Keep scrolled to bottom after form submission
    const form = document.querySelector("form");
    if (form) {
        form.addEventListener("submit", function() {
            // Store a flag in sessionStorage to indicate we should scroll on next page load
            sessionStorage.setItem("scrollToBottom", "true");
        });
    }

    // Check if we need to scroll due to form submission (page reload)
    if (sessionStorage.getItem("scrollToBottom") === "true") {
        sessionStorage.removeItem("scrollToBottom");
        // Use a slight delay to ensure DOM is fully loaded
        setTimeout(function() {
            window.scrollTo(0, document.body.scrollHeight);
        }, 100);
    }

    setInterval(async () => {
        const response = await fetch(location.href + "/changed");

        if (!response.ok) {
          throw new Error(`Response status: ${response.status}`);
        }

        const json = await response.json();

        let message_ids = localStorage.getItem("message_ids");

        if (message_ids != null) {
            message_ids = JSON.parse(message_ids);
        } else {
            message_ids = [];
        }
        
        if (message_ids.length != json.length) {
            console.log("Length mismatch")
            localStorage.setItem("message_ids", JSON.stringify(json));
            location.reload();
        } else {
            for (let i = 0; i < json.length; i++) {
                if (message_ids[i] != json[i]) {
                    console.log("Different at " + i)
                    localStorage.setItem("message_ids", JSON.stringify(json));
                    location.reload();
                }
            }
        }
    }, 1000);
</script>